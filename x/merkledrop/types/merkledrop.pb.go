// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fanfury/merkledrop/v1beta1/merkledrop.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Merkledrop struct {
	// merkledrop id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// merkle_root of the merkledrop
	MerkleRoot string `protobuf:"bytes,2,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty" yaml:"merkle_root"`
	// merkledrop start height
	StartHeight int64 `protobuf:"varint,3,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// merkledrop end height
	EndHeight int64 `protobuf:"varint,4,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// denom to distribuite
	Denom string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	// amount to distribuite
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// claimed amount
	Claimed github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=claimed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"claimed"`
	// merkledrop's owner
	Owner string `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Merkledrop) Reset()      { *m = Merkledrop{} }
func (*Merkledrop) ProtoMessage() {}
func (*Merkledrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3a9071157f71190, []int{0}
}
func (m *Merkledrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Merkledrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Merkledrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Merkledrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merkledrop.Merge(m, src)
}
func (m *Merkledrop) XXX_Size() int {
	return m.Size()
}
func (m *Merkledrop) XXX_DiscardUnknown() {
	xxx_messageInfo_Merkledrop.DiscardUnknown(m)
}

var xxx_messageInfo_Merkledrop proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Merkledrop)(nil), "fanfury.merkledrop.v1beta1.Merkledrop")
}

func init() {
	proto.RegisterFile("fanfury/merkledrop/v1beta1/merkledrop.proto", fileDescriptor_f3a9071157f71190)
}

var fileDescriptor_f3a9071157f71190 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0x4e, 0x72, 0x77, 0xbd, 0x3b, 0x1f, 0x62, 0xb0, 0x4e, 0x28, 0x8a, 0x84, 0x53, 0x3a, 0xa0,
	0x4a, 0x88, 0x58, 0x27, 0x06, 0xa4, 0x1b, 0x6f, 0x40, 0x87, 0x04, 0x4b, 0x46, 0x96, 0x93, 0x13,
	0xbb, 0x89, 0xd5, 0xd8, 0x2f, 0x72, 0x1c, 0xa0, 0xff, 0x80, 0x91, 0x91, 0xb1, 0x3f, 0xa7, 0x63,
	0x47, 0xc4, 0x50, 0xa0, 0xfd, 0x07, 0xfc, 0x02, 0x54, 0x27, 0xad, 0x32, 0xdf, 0x64, 0x7f, 0xef,
	0xfb, 0xde, 0xfb, 0x3e, 0xcb, 0x0f, 0xbd, 0x9a, 0x31, 0x3d, 0x6b, 0xcd, 0x82, 0x2a, 0x61, 0xe6,
	0x95, 0xe0, 0x06, 0x6a, 0xfa, 0xf9, 0x26, 0x13, 0x96, 0xdd, 0x0c, 0x4a, 0x49, 0x6d, 0xc0, 0x02,
	0x8e, 0x7a, 0x71, 0x32, 0x60, 0x7a, 0x71, 0x74, 0x5d, 0x40, 0x01, 0x4e, 0x46, 0xf7, 0xb7, 0xae,
	0x23, 0x8a, 0x0b, 0x80, 0xa2, 0x12, 0xd4, 0xa1, 0xac, 0x9d, 0x51, 0x2b, 0x95, 0x68, 0x2c, 0x53,
	0xfd, 0xc8, 0x88, 0xe4, 0xd0, 0x28, 0x68, 0x68, 0xc6, 0x1a, 0x71, 0x34, 0xce, 0x41, 0xea, 0x8e,
	0x9f, 0xfc, 0x0e, 0x10, 0xfa, 0x78, 0x74, 0xc3, 0x4f, 0x51, 0x20, 0x79, 0xe8, 0x8f, 0xfd, 0xe9,
	0x69, 0x1a, 0x48, 0x8e, 0xdf, 0xa2, 0xab, 0x2e, 0xcb, 0x83, 0x01, 0xb0, 0x61, 0x30, 0xf6, 0xa7,
	0x97, 0x77, 0xcf, 0xfe, 0x6d, 0x62, 0xbc, 0x60, 0xaa, 0xba, 0x9d, 0x0c, 0xc8, 0x49, 0x8a, 0x3a,
	0x94, 0x02, 0x58, 0xfc, 0x02, 0x3d, 0x69, 0x2c, 0x33, 0xf6, 0xa1, 0x14, 0xb2, 0x28, 0x6d, 0x78,
	0x32, 0xf6, 0xa7, 0x27, 0xe9, 0x95, 0xab, 0xdd, 0xbb, 0x12, 0x7e, 0x8e, 0x90, 0xd0, 0xfc, 0x20,
	0x38, 0x75, 0x82, 0x4b, 0xa1, 0x79, 0x4f, 0x5f, 0xa3, 0x33, 0x2e, 0x34, 0xa8, 0xf0, 0x6c, 0x6f,
	0x9a, 0x76, 0x00, 0xbf, 0x43, 0x23, 0xa6, 0xa0, 0xd5, 0x36, 0x1c, 0xb9, 0x2c, 0xc9, 0x6a, 0x13,
	0x7b, 0xbf, 0x36, 0xf1, 0xcb, 0x42, 0xda, 0xb2, 0xcd, 0x92, 0x1c, 0x14, 0xed, 0x9f, 0xdc, 0x1d,
	0xaf, 0x1b, 0x3e, 0xa7, 0x76, 0x51, 0x8b, 0x26, 0x79, 0xaf, 0x6d, 0xda, 0x77, 0xe3, 0x7b, 0x74,
	0x9e, 0x57, 0x4c, 0x2a, 0xc1, 0xc3, 0xf3, 0x47, 0x0d, 0x3a, 0xb4, 0xef, 0x73, 0xc2, 0x17, 0x2d,
	0x4c, 0x78, 0xd1, 0xe5, 0x74, 0xe0, 0xf6, 0xe2, 0xdb, 0x32, 0xf6, 0x7e, 0x2c, 0x63, 0xef, 0xee,
	0xc3, 0xea, 0x2f, 0xf1, 0x56, 0x5b, 0xe2, 0xaf, 0xb7, 0xc4, 0xff, 0xb3, 0x25, 0xfe, 0xf7, 0x1d,
	0xf1, 0xd6, 0x3b, 0xe2, 0xfd, 0xdc, 0x11, 0xef, 0x53, 0x32, 0xb0, 0xd3, 0xa2, 0x2e, 0xa5, 0x91,
	0x8a, 0x1e, 0x76, 0xe6, 0xeb, 0x70, 0x6b, 0x9c, 0x75, 0x36, 0x72, 0xdf, 0xf6, 0xe6, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x58, 0x6f, 0x4e, 0xef, 0x58, 0x02, 0x00, 0x00,
}

func (m *Merkledrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Merkledrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Merkledrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMerkledrop(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.Claimed.Size()
		i -= size
		if _, err := m.Claimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMerkledrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMerkledrop(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMerkledrop(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndHeight != 0 {
		i = encodeVarintMerkledrop(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.StartHeight != 0 {
		i = encodeVarintMerkledrop(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintMerkledrop(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMerkledrop(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMerkledrop(dAtA []byte, offset int, v uint64) int {
	offset -= sovMerkledrop(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Merkledrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMerkledrop(uint64(m.Id))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovMerkledrop(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovMerkledrop(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovMerkledrop(uint64(m.EndHeight))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMerkledrop(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMerkledrop(uint64(l))
	l = m.Claimed.Size()
	n += 1 + l + sovMerkledrop(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMerkledrop(uint64(l))
	}
	return n
}

func sovMerkledrop(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMerkledrop(x uint64) (n int) {
	return sovMerkledrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Merkledrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMerkledrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Merkledrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Merkledrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMerkledrop
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMerkledrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMerkledrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMerkledrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMerkledrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMerkledrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMerkledrop
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMerkledrop
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMerkledrop
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMerkledrop        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMerkledrop          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMerkledrop = fmt.Errorf("proto: unexpected end of group")
)
