// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fanfury/merkledrop/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryMerkledropRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryMerkledropRequest) Reset()         { *m = QueryMerkledropRequest{} }
func (m *QueryMerkledropRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMerkledropRequest) ProtoMessage()    {}
func (*QueryMerkledropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4386e94a8e205fd5, []int{0}
}
func (m *QueryMerkledropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkledropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkledropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkledropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkledropRequest.Merge(m, src)
}
func (m *QueryMerkledropRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkledropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkledropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkledropRequest proto.InternalMessageInfo

type QueryMerkledropResponse struct {
	Merkledrop Merkledrop `protobuf:"bytes,1,opt,name=merkledrop,proto3" json:"merkledrop"`
}

func (m *QueryMerkledropResponse) Reset()         { *m = QueryMerkledropResponse{} }
func (m *QueryMerkledropResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMerkledropResponse) ProtoMessage()    {}
func (*QueryMerkledropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4386e94a8e205fd5, []int{1}
}
func (m *QueryMerkledropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMerkledropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMerkledropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMerkledropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMerkledropResponse.Merge(m, src)
}
func (m *QueryMerkledropResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMerkledropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMerkledropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMerkledropResponse proto.InternalMessageInfo

type QueryIndexClaimedRequest struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryIndexClaimedRequest) Reset()         { *m = QueryIndexClaimedRequest{} }
func (m *QueryIndexClaimedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIndexClaimedRequest) ProtoMessage()    {}
func (*QueryIndexClaimedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4386e94a8e205fd5, []int{2}
}
func (m *QueryIndexClaimedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexClaimedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexClaimedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexClaimedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexClaimedRequest.Merge(m, src)
}
func (m *QueryIndexClaimedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexClaimedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexClaimedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexClaimedRequest proto.InternalMessageInfo

type QueryIndexClaimedResponse struct {
	IsClaimed bool `protobuf:"varint,1,opt,name=is_claimed,json=isClaimed,proto3" json:"is_claimed,omitempty" yaml:"is_claimed"`
}

func (m *QueryIndexClaimedResponse) Reset()         { *m = QueryIndexClaimedResponse{} }
func (m *QueryIndexClaimedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIndexClaimedResponse) ProtoMessage()    {}
func (*QueryIndexClaimedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4386e94a8e205fd5, []int{3}
}
func (m *QueryIndexClaimedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndexClaimedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndexClaimedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndexClaimedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndexClaimedResponse.Merge(m, src)
}
func (m *QueryIndexClaimedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndexClaimedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndexClaimedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndexClaimedResponse proto.InternalMessageInfo

// QueryParametersRequest is request type for the Query/Parameters RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4386e94a8e205fd5, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParametersResponse is response type for the Query/Parameters RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4386e94a8e205fd5, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryMerkledropRequest)(nil), "fanfury.merkledrop.v1beta1.QueryMerkledropRequest")
	proto.RegisterType((*QueryMerkledropResponse)(nil), "fanfury.merkledrop.v1beta1.QueryMerkledropResponse")
	proto.RegisterType((*QueryIndexClaimedRequest)(nil), "fanfury.merkledrop.v1beta1.QueryIndexClaimedRequest")
	proto.RegisterType((*QueryIndexClaimedResponse)(nil), "fanfury.merkledrop.v1beta1.QueryIndexClaimedResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "fanfury.merkledrop.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fanfury.merkledrop.v1beta1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("fanfury/merkledrop/v1beta1/query.proto", fileDescriptor_4386e94a8e205fd5)
}

var fileDescriptor_4386e94a8e205fd5 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6a, 0x13, 0x41,
	0x18, 0xde, 0x0d, 0x69, 0xd0, 0x5f, 0x11, 0x1c, 0xa3, 0xc6, 0x45, 0xb6, 0x32, 0x48, 0x2d, 0x2a,
	0x33, 0x34, 0x8d, 0x17, 0x4f, 0x25, 0x7a, 0x51, 0x2a, 0xd8, 0x5c, 0x04, 0x2f, 0x32, 0xc9, 0x4e,
	0xb7, 0x83, 0xd9, 0x9d, 0xed, 0xce, 0x46, 0x1a, 0x4a, 0x2f, 0x3e, 0x81, 0x20, 0xe2, 0x43, 0xf8,
	0x20, 0xe6, 0x58, 0xf0, 0xe2, 0xa9, 0x68, 0xe2, 0x13, 0xf8, 0x04, 0x92, 0x99, 0x69, 0x76, 0x8b,
	0xe9, 0xa6, 0xb9, 0x65, 0xfe, 0xf9, 0xbe, 0xef, 0xff, 0xe6, 0xfb, 0xff, 0x2c, 0xac, 0xed, 0xb2,
	0x78, 0x77, 0x90, 0x0e, 0x69, 0xc4, 0xd3, 0xf7, 0x7d, 0x1e, 0xa4, 0x32, 0xa1, 0x1f, 0x36, 0xba,
	0x3c, 0x63, 0x1b, 0x74, 0x7f, 0xc0, 0xd3, 0x21, 0x49, 0x52, 0x99, 0x49, 0xe4, 0x59, 0x1c, 0xc9,
	0x71, 0xc4, 0xe2, 0xbc, 0x7a, 0x28, 0x43, 0xa9, 0x61, 0x74, 0xfa, 0xcb, 0x30, 0xbc, 0xbb, 0xa1,
	0x94, 0x61, 0x9f, 0x53, 0x96, 0x08, 0xca, 0xe2, 0x58, 0x66, 0x2c, 0x13, 0x32, 0x56, 0xf6, 0xd6,
	0xef, 0x49, 0x15, 0x49, 0x45, 0xbb, 0x4c, 0xf1, 0x59, 0xc3, 0x9e, 0x14, 0xb1, 0xbd, 0x7f, 0x54,
	0xe2, 0xab, 0x60, 0xc1, 0x80, 0x1f, 0x94, 0x80, 0x13, 0x96, 0xb2, 0xc8, 0x76, 0xc5, 0xeb, 0x70,
	0x6b, 0x67, 0xfa, 0xa8, 0x57, 0x33, 0x5c, 0x87, 0xef, 0x0f, 0xb8, 0xca, 0xd0, 0x35, 0xa8, 0x88,
	0xa0, 0xe1, 0xde, 0x73, 0xd7, 0xab, 0x9d, 0x8a, 0x08, 0x70, 0x08, 0xb7, 0xff, 0x43, 0xaa, 0x44,
	0xc6, 0x8a, 0xa3, 0x6d, 0x80, 0xbc, 0x8f, 0xa6, 0x5c, 0x69, 0xae, 0x91, 0xf3, 0xf3, 0x21, 0xb9,
	0x46, 0xbb, 0x3a, 0x3a, 0x59, 0x75, 0x3a, 0x05, 0x3e, 0xde, 0x82, 0x86, 0x6e, 0xf4, 0x22, 0x0e,
	0xf8, 0xc1, 0xb3, 0x3e, 0x13, 0x11, 0x0f, 0xce, 0x31, 0x85, 0xea, 0xb0, 0x22, 0xa6, 0xb0, 0x46,
	0x45, 0x97, 0xcc, 0x01, 0xef, 0xc0, 0x9d, 0x39, 0x0a, 0xd6, 0x6c, 0x0b, 0x40, 0xa8, 0x77, 0x3d,
	0x53, 0xd5, 0x52, 0x97, 0xda, 0x37, 0xff, 0x9e, 0xac, 0x5e, 0x1f, 0xb2, 0xa8, 0xff, 0x14, 0xe7,
	0x77, 0xb8, 0x73, 0x59, 0x28, 0xcb, 0xc6, 0x75, 0x40, 0x5a, 0xf2, 0xb5, 0x0e, 0xcf, 0xda, 0xc1,
	0x6f, 0xe0, 0xc6, 0x99, 0xaa, 0x6d, 0xb1, 0x05, 0x35, 0x13, 0xb2, 0xcd, 0x02, 0x97, 0x65, 0x61,
	0xb8, 0x36, 0x07, 0xcb, 0x6b, 0x7e, 0xad, 0xc2, 0x8a, 0x56, 0x46, 0xdf, 0x5c, 0x80, 0x3c, 0x2e,
	0xd4, 0x2c, 0x93, 0x9a, 0x3f, 0x49, 0x6f, 0x73, 0x29, 0x8e, 0x79, 0x03, 0x6e, 0x7d, 0xfc, 0xf1,
	0xe7, 0x73, 0x85, 0xa0, 0xc7, 0xb4, 0x6c, 0xef, 0xd8, 0x69, 0x49, 0xd1, 0x43, 0x11, 0x1c, 0xa1,
	0xef, 0x2e, 0x5c, 0x2d, 0xa6, 0x8e, 0x5a, 0x0b, 0x7b, 0xcf, 0x19, 0xb3, 0xf7, 0x64, 0x49, 0x96,
	0xf5, 0xfc, 0x52, 0x7b, 0x7e, 0x8e, 0xda, 0xcb, 0x78, 0xa6, 0x7a, 0x67, 0x4e, 0x87, 0x4e, 0x0f,
	0xf5, 0xf1, 0x08, 0x7d, 0x71, 0xa1, 0x66, 0x46, 0x83, 0xc8, 0x42, 0x37, 0x67, 0xb6, 0xc2, 0xa3,
	0x17, 0xc6, 0x5b, 0xdf, 0x0f, 0xb5, 0xef, 0xfb, 0x08, 0xd3, 0x85, 0x7f, 0xdb, 0xf6, 0xf6, 0xe8,
	0xb7, 0xef, 0x8c, 0xc6, 0xbe, 0x7b, 0x3c, 0xf6, 0xdd, 0x5f, 0x63, 0xdf, 0xfd, 0x34, 0xf1, 0x9d,
	0xe3, 0x89, 0xef, 0xfc, 0x9c, 0xf8, 0xce, 0x5b, 0x12, 0x8a, 0x6c, 0x6f, 0xd0, 0x25, 0x3d, 0x19,
	0xd1, 0x98, 0x27, 0x7b, 0x22, 0x15, 0xd1, 0x4c, 0xf4, 0xa0, 0x28, 0x9b, 0x0d, 0x13, 0xae, 0xba,
	0x35, 0xfd, 0x15, 0xd8, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x91, 0x55, 0x05, 0x3f, 0xf5, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Merkledrop(ctx context.Context, in *QueryMerkledropRequest, opts ...grpc.CallOption) (*QueryMerkledropResponse, error)
	IndexClaimed(ctx context.Context, in *QueryIndexClaimedRequest, opts ...grpc.CallOption) (*QueryIndexClaimedResponse, error)
	// Params queries the fantoken parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Merkledrop(ctx context.Context, in *QueryMerkledropRequest, opts ...grpc.CallOption) (*QueryMerkledropResponse, error) {
	out := new(QueryMerkledropResponse)
	err := c.cc.Invoke(ctx, "/fanfury.merkledrop.v1beta1.Query/Merkledrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IndexClaimed(ctx context.Context, in *QueryIndexClaimedRequest, opts ...grpc.CallOption) (*QueryIndexClaimedResponse, error) {
	out := new(QueryIndexClaimedResponse)
	err := c.cc.Invoke(ctx, "/fanfury.merkledrop.v1beta1.Query/IndexClaimed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fanfury.merkledrop.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Merkledrop(context.Context, *QueryMerkledropRequest) (*QueryMerkledropResponse, error)
	IndexClaimed(context.Context, *QueryIndexClaimedRequest) (*QueryIndexClaimedResponse, error)
	// Params queries the fantoken parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Merkledrop(ctx context.Context, req *QueryMerkledropRequest) (*QueryMerkledropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merkledrop not implemented")
}
func (*UnimplementedQueryServer) IndexClaimed(ctx context.Context, req *QueryIndexClaimedRequest) (*QueryIndexClaimedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexClaimed not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Merkledrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMerkledropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Merkledrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fanfury.merkledrop.v1beta1.Query/Merkledrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Merkledrop(ctx, req.(*QueryMerkledropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IndexClaimed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIndexClaimedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IndexClaimed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fanfury.merkledrop.v1beta1.Query/IndexClaimed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IndexClaimed(ctx, req.(*QueryIndexClaimedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fanfury.merkledrop.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fanfury.merkledrop.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Merkledrop",
			Handler:    _Query_Merkledrop_Handler,
		},
		{
			MethodName: "IndexClaimed",
			Handler:    _Query_IndexClaimed_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fanfury/merkledrop/v1beta1/query.proto",
}

func (m *QueryMerkledropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkledropRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkledropRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMerkledropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMerkledropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMerkledropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Merkledrop.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryIndexClaimedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexClaimedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexClaimedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIndexClaimedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndexClaimedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndexClaimedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsClaimed {
		i--
		if m.IsClaimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMerkledropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryMerkledropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Merkledrop.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryIndexClaimedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryIndexClaimedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsClaimed {
		n += 2
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMerkledropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkledropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkledropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMerkledropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMerkledropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMerkledropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merkledrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Merkledrop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexClaimedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexClaimedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexClaimedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndexClaimedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndexClaimedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndexClaimedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClaimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClaimed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
